# Este flujo de trabajo utiliza acciones que no están certificadas por GitHub.
# Son proporcionadas por un tercero y están regidas por
# términos de servicio, política de privacidad y documentación de soporte
# separados.

# Un flujo de trabajo de ejemplo que verifica el código, crea una imagen de contenedor
# usando Docker y escanea esa imagen en busca de vulnerabilidades usando
# Snyk. Los resultados se cargan luego en GitHub Security Code Scanning
#
# Para más ejemplos, incluido cómo limitar los escaneos solo a problemas de alta gravedad
# , monitorear imágenes en busca de vulnerabilidades recién reveladas en Snyk y
# fallar las verificaciones de PR por nuevas vulnerabilidades, ve a https://github.com/snyk/actions/

name: Snyk Container

on:
  push:
    branches: [ "main" ]
  pull_request:
    # Las ramas a continuación deben ser un subconjunto de las ramas anteriores
    branches: [ "main" ]
  schedule:
    - cron: '18 9 * * 3'

permissions:
  contents: read

jobs:
  snyk:
    permissions:
      contents: read # para que actions/checkout obtenga el código
      security-events: write # para github/codeql-action/upload-sarif para cargar los resultados SARIF
      actions: read # solo requerido para un repositorio privado por github/codeql-action/upload-sarif para obtener el estado de ejecución de la acción
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Construir una imagen de Docker
      run: docker build -t your/image-to-test .
    - name: Ejecutar Snyk para verificar la imagen de Docker en busca de vulnerabilidades
      # Snyk se puede usar para romper la compilación cuando detecta vulnerabilidades.
      # En este caso, queremos cargar los problemas en GitHub Code Scanning
      continue-on-error: true
      uses: snyk/actions/docker@14818c4695ecc4045f33c9cee9e795a788711ca4
      env:
        # Para usar la Acción de Snyk, necesitarás tener un token de API de Snyk.
        # Más detalles en https://github.com/snyk/actions#getting-your-snyk-token
        # o puedes registrarte gratis en https://snyk.io/login
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: your/image-to-test
        args: --file=Dockerfile --sarif-file-output=snyk.sarif
    - name: Asignar severidad personalizada a los hallazgos
      run: |
        # Leer el archivo SARIF
        sarif_file="snyk.sarif"
        sarif=$(cat "$sarif_file")

        # Definir mapeos de severidad personalizados
        # Puedes definir tu propia lógica aquí para asignar severidades según tus criterios
        # Este es solo un ejemplo, ajústalo según tus necesidades
        custom_severities='{
          "Critical": ["Critical"],
          "High": ["High"],
          "Medium": ["Medium", "Low"],
          "Low": ["Info"]
        }'

        # Iterar a través de cada hallazgo y asignar severidad personalizada
        for severity in $(echo "$custom_severities" | jq -r 'keys[]'); do
          findings=$(echo "$sarif" | jq --arg severity "$severity" --argjson severity_values "${custom_severities[$severity]}" '.runs[0].results |= map(if (.properties.securitySeverity | IN($severity_values[])) then . + { "properties": { "customSeverity": $severity } } else . end)')
        done

        # Escribir de nuevo el archivo SARIF modificado
        echo "$findings" > "$sarif_file"
      shell: bash
      env:
        SARIF_FILE: snyk.sarif
    - name: Cargar resultados en GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: snyk.sarif

